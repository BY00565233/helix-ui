//
// ===== Mixins for <hx-switch-control> states =====
//

// ========== PRISTINE ==========
@mixin __switchControl($pseudo-state: null, $checkBox-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow;

    &::-ms-check {
      border-color: $cyan-700;
    }
  } @else if $pseudo-state == hover {
    @if $checkBox-state == unchecked {
      background-color: $gray-0;
      border: 0.125rem solid $cyan-500;

      &::before {
        background-color: $gray-0;
        border: 0.125rem solid $cyan-500;
        left: -0.12rem;
      }

      &::after {
        color: $cyan-500;
      }
    } @else {
      background-color: $cyan-500;

      &::before {
        background-color: $gray-0;
        left: 0.1rem;
      }

      &::after {
        color: $gray-0;
      }
    }
  } @else {
    color: $gray-500;

    &::-ms-check {
      background-color: $gray-0;
      border-color: currentColor;
      border-style: solid;
      border-width: 0.063rem;
      color: inherit;
    }
  }
}

// ========== Error ==========
@mixin __switchControl--error($pseudo-state: null, $checkBox-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow-invalid;

    &::-ms-check {
      border-color: $red-900;
    }
  } @else if $pseudo-state == hover {
    &::-ms-check {
      background-color: $red-100;
    }
  } @else {
    @if $checkBox-state == checked {
      background-color: $red-900 !important;
      border: 0.125rem solid $red-900;

      &:after {
        color: $gray-0 !important;
      }

      &:before {
        background-color: $gray-0;
        border: 0.125rem solid $red-900;
      }
    } @else {
      background-color: $gray-0;
      border: 0.125rem solid $red-900 !important;

      &::after {
        color: $red-900 !important;
      }

      &::before {
        background-color: $gray-0;
        border: 0.125rem solid $red-900 !important;
        content: "\0021";// error state exclamation point
        color: $red-900;
        font-size: 1.063rem;
        text-align: center;
        line-height: 1.813rem;
      }
    }
  }
}

// ========== DISABLED ==========
@mixin __switchControl--disabled($pseudo-state: null) {
  cursor: not-allowed;
  @if $pseudo-state == focus {
    box-shadow: 0 0 4px rgba($gray-500, 0.5);

    &::-ms-check {
      border-color: $gray-500;
      box-shadow: 0 0 4px rgba($gray-500, 0.5);
    }
  } @else if $pseudo-state == hover {
    &::-ms-check {
      background-color: $gray-100;
      border-color: $gray-500;
      color: $gray-500;
    }
  } @else if $pseudo-state == unchecked {
    background-color: $gray-200;
    border: 0.125rem solid $gray-500;

    &:before {
      background-color: $gray-200;
      border: 0.125rem solid $gray-500;
    }

    &::after {
      color: $gray-500;
    }
  } @else {
    background-color: $gray-500;

    &::before {
      background-color: $gray-200;
    }

    &::after {
      color: $gray-200;
    }
  }
}

@mixin hxSwitchControl(
  $state: null,
  $pseudo-state: null,
  $checkBox-state: null
) {
  @if $state == error {
    @include __switchControl--error($pseudo-state, $checkBox-state);
  } @else if $state == disabled {
    @include __switchControl--disabled($pseudo-state);
  } @else {
    @include __switchControl($pseudo-state, $checkBox-state);
  }
}
